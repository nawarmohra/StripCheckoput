{"ast":null,"code":"var _jsxFileName = \"/Users/nawarmohra/StripCheckoput/StripCheckoput/src/components/context/cartProvider.tsx\";\nimport React, { Component } from 'react';\nimport { CartContext } from './cartContext';\nimport { shippingAlternatives } from '../checkoutFracksatt';\nexport class CartProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setSelectedShipping = shipping => this.setState({\n      selectedShipping: shipping\n    });\n\n    this.addProductToCart = product => {\n      const clonedCart = Object.assign([], this.state.cartItems);\n      const foundProductIndex = this.state.cartItems.findIndex(productToFind => {\n        return product.id === productToFind.product.id;\n      });\n\n      if (foundProductIndex == -1) {\n        clonedCart.push({\n          product: product,\n          quantity: 1\n        });\n      } else {\n        clonedCart[foundProductIndex].quantity++;\n      }\n\n      this.setState({\n        cartItems: clonedCart\n      }, () => {\n        console.log(this.state.cartItems);\n      });\n    };\n\n    this.removeProductFromCart = product => {\n      const clonedCart = Object.assign([], this.state.cartItems);\n      const index = clonedCart.findIndex(productToFind => {\n        return product.id === productToFind.product.id;\n      });\n\n      if (index != -1) {\n        if (clonedCart[index].quantity > 1) {\n          clonedCart[index].quantity--;\n        } else {\n          clonedCart.splice(index, 1);\n        }\n      }\n\n      this.setState({\n        cartItems: clonedCart\n      }, () => {\n        console.log(this.state);\n      });\n    };\n\n    this.getTotalPrice = () => {\n      let sum = 0;\n\n      for (const cartItem of this.state.cartItems) {\n        sum += cartItem.product.price * cartItem.quantity;\n      }\n\n      return sum;\n    };\n\n    this.state = {\n      cartItems: [],\n      selectedShipping: shippingAlternatives[0]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(CartContext.Provider, {\n      value: { ...this.state,\n        addProductToCart: this.addProductToCart,\n        removeProductFromCart: this.removeProductFromCart,\n        getTotalPrice: this.getTotalPrice,\n        setSelectedShipping: this.setSelectedShipping\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}","map":{"version":3,"sources":["/Users/nawarmohra/StripCheckoput/StripCheckoput/src/components/context/cartProvider.tsx"],"names":["React","Component","CartContext","shippingAlternatives","CartProvider","constructor","props","setSelectedShipping","shipping","setState","selectedShipping","addProductToCart","product","clonedCart","Object","assign","state","cartItems","foundProductIndex","findIndex","productToFind","id","push","quantity","console","log","removeProductFromCart","index","splice","getTotalPrice","sum","cartItem","price","render","children"],"mappings":"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","sourcesContent":["import React, {createContext, Component} from 'react'\nimport {CartContext} from './cartContext'\nimport {Product} from '../Products'\nimport { Shipping, shippingAlternatives } from '../checkoutFracksatt'\n\nexport interface CartItem {\n    product: Product\n    quantity: number\n}\nexport interface ProviderState {\n    cartItems: CartItem[]\n    selectedShipping: Shipping\n}\n\nexport class CartProvider extends Component<{}, ProviderState> {\n\n    constructor(props: {}) {\n        super(props)\n        this.state = {\n            cartItems: [],\n            selectedShipping: shippingAlternatives[0]\n        }\n    }\n\n    setSelectedShipping = (shipping: Shipping) => this.setState({ selectedShipping: shipping })\n    \n    addProductToCart = (product: Product) => {\n        const clonedCart:CartItem[] = Object.assign([], this.state.cartItems)\n        \n        const foundProductIndex = this.state.cartItems.findIndex((productToFind: CartItem) => {\n            return product.id === productToFind.product.id\n        })\n        if (foundProductIndex == -1){\n            clonedCart.push({product: product, quantity: 1})\n        }\n        else {\n            clonedCart[foundProductIndex].quantity++\n        }\n        this.setState({cartItems: clonedCart},  ()=> {console.log(this.state.cartItems)})\n        \n    }\n\n    removeProductFromCart = (product: Product) =>{\n        const clonedCart:CartItem[] = Object.assign([], this.state.cartItems)\n        const index = clonedCart.findIndex((productToFind: CartItem) => {\n            return product.id === productToFind.product.id\n        })\n        \n        if (index != -1) {\n            if(clonedCart[index].quantity > 1){\n                clonedCart[index].quantity--\n            }\n            else{\n                clonedCart.splice(index, 1);\n            }\n        }\n        this.setState({cartItems: clonedCart}, ()=> {console.log(this.state)})\n    }\n\n    getTotalPrice = () => {\n        let sum = 0\n        \n        for (const cartItem of this.state.cartItems) {\n            sum += cartItem.product.price * cartItem.quantity\n        }\n\n        return sum\n    }\n\n    render(){\n        return(\n            <CartContext.Provider value={{\n                ...this.state,\n                addProductToCart: this.addProductToCart,\n                removeProductFromCart: this.removeProductFromCart,\n                getTotalPrice: this.getTotalPrice,\n                setSelectedShipping: this.setSelectedShipping\n            }}>\n                {this.props.children}\n            </CartContext.Provider>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}